#include <iostream>
#include <vector>
#include <limits> // Include limits header for stream clearing

using namespace std;

// Function to draw the Tic Tac Toe board
void drawBoard(const vector<vector<char>>& board) {
    cout << "-------------" << endl;
    for (int i = 0; i < 3; ++i) {
        cout << "| ";
        for (int j = 0; j < 3; ++j) {
            cout << board[i][j] << " | ";
        }
        cout << endl;
        cout << "-------------" << endl;
    }
}

// Function to check if a player has won
bool checkWin(const vector<vector<char>>& board, char player) {
    // Check rows and columns
    for (int i = 0; i < 3; ++i) {
        if (board[i][0] == player && board[i][1] == player && board[i][2] == player)
            return true;
        if (board[0][i] == player && board[1][i] == player && board[2][i] == player)
            return true;
    }
    // Check diagonals
    if (board[0][0] == player && board[1][1] == player && board[2][2] == player)
        return true;
    if (board[0][2] == player && board[1][1] == player && board[2][0] == player)
        return true;
    return false;
}

// Function to check if the board is full
bool checkDraw(const vector<vector<char>>& board) {
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            if (board[i][j] == ' ')
                return false; // If any empty cell is found, game is not drawn yet
        }
    }
    return true; // All cells filled, game is drawn
}

// Function to convert grid position to row and column
pair<int, int> getPosition(int position) {
    int row = (position - 1) / 3;
    int col = (position - 1) % 3;
    return make_pair(row, col);
}

int main() {
    vector<vector<char>> board(3, vector<char>(3, ' ')); // Initialize empty board
    char currentPlayer = 'X';
    int position;

    cout << "Welcome to Tic Tac Toe!" << endl;
    drawBoard(board);

    // Game loop
    while (true) {
        // Input move from the player
        cout << "Player " << currentPlayer << ", enter your move (1-9): ";
        if (!(cin >> position)) {
            // Handle invalid input (non-integer)
            cout << "Invalid input! Please enter a number." << endl;
            cin.clear(); // Clear error flags
            cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Ignore invalid input
            continue;
        }

        // Convert position to row and column
        pair<int, int> rowCol = getPosition(position);
        int row = rowCol.first;
        int col = rowCol.second;

        // Check if the move is valid
        if (position < 1 || position > 9 || board[row][col] != ' ') {
            cout << "Invalid move! Try again." << endl;
            continue;
        }

        // Apply the move to the board
        board[row][col] = currentPlayer;

        // Draw the updated board
        drawBoard(board);

        // Check if the current player has won
        if (checkWin(board, currentPlayer)) {
            cout << "Player " << currentPlayer << " wins!" << endl;
            break;
        }

        // Check if the game is drawn
        if (checkDraw(board)) {
            cout << "It's a draw!" << endl;
            break;
        }

        // Switch players
        currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
    }

    return 0;
}

